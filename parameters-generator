# -*- coding: utf-8 -*-

import csv
import math
import operator
import draw_neuralnetwork_helper as drawHelper
import numpy as np


def generate_results(result):
    with open('result.csv', 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(('l', 'k', 'pl', 'nl', 'muL', 'max', '', 'thetaHL', 'thetaOL'))
        result_rows = []
        global_max = 0

        heads = list(map(lambda x: x['head'], result['clauses']))

        for i in range(0, len(result['clauses'])):
            row = {}

            clause = result['clauses'][i]
            row['kl'] = len(clause['literals'])
            row['pl'] = len(list(filter(lambda l: l['is_positive'], clause['literals'])))
            row['nl'] = len(list(filter(lambda l: not l['is_positive'], clause['literals'])))

            # Max number of duplicate heads (mul)
            b = {}
            for head in heads:
                b[head] = b.get(head, 0) + 1
            row['mul'] = b[max(b.items(), key=operator.itemgetter(1))[0]]

            row['max'] = row['mul']
            if row['kl'] > row['max']:
                row['max'] = row['kl']

            if row['max'] > global_max:
                global_max = row['max']

            result_rows.append(row)

        a_min = round((global_max - 1) / (global_max + 1),3)

        W = 0

        divider = round(((global_max * (a_min - 1)) + (a_min + 1)),2)

        print(divider)

        if divider != 0:
            W = 2 * (math.log(1 + a_min) - math.log(1 - a_min)) / divider

        W = math.ceil(W) + 1

        for row in result_rows:
            row['thetaHL'] = ((1 + a_min) * (row['kl'] - 1)  / 2) * W
            row['thetaOL'] = ((1 + a_min) * (1 - row['mul']) / 2) * W

        for i in range(0, len(result_rows)):
            row = result_rows[i]
            writer.writerow(('k' + str(i+1), row['kl'], row['pl'], row['nl'], row['mul'], row['max'], '', row['thetaHL'], row['thetaOL']))

        writer.writerow(('Max', '', '', '', '', str(global_max)))
        writer.writerow(('Amin', '', '', '', '', str(a_min)))
        writer.writerow(('W', '', '', '', '', str(W)))

        for row in result_rows:
            print(row)
        print("global max: " + str(global_max) + " | Amin: " + str(a_min) + " | W: " + str(W))

        num_inputs = 0
        for cl in result['clauses']:
            num_inputs += len(cl['literals'])

        X = np.array([num_inputs, len(result_rows), len(heads)])
        network = drawHelper.DrawNN(X)
        network.draw()


def parse(file):
    result = {'clauses': []}

    with open(file) as f:
        content = f.read().replace('\n','').replace('\t','').strip()
        cls = content.split(";")

        for cl in cls:
            # clause = cl.split('<-')[1]
            if len(cl.split('<-')) == 2:
                clause = {'head': cl.split('<-')[0].strip(), 'literals': []}
                ls = cl.split('<-')[1].split(',')

                for l in ls:
                    is_positive = True
                    if '~' in l or 'not' in l or '-' in l:
                        is_positive = False
                        l = l.replace('~', '').replace('not', '').replace('-', '')

                    if l is not '':
                        clause['literals'].append({
                            'name': l.strip(),
                            'is_positive': is_positive
                        })

                result['clauses'].append(clause)

            else:
                if len(cl.strip()) != 0:
                    print("clause â„–" + str(i) + " has errors: ")

    # print(result)
    generate_results(result)


if __name__ == '__main__':
    parse("input.txt")
